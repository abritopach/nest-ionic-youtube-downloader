import { RULE_NAME as accessibilityAltTextRuleName } from './rules/accessibility-alt-text';
import { RULE_NAME as accessibilityElementsContentRuleName } from './rules/accessibility-elements-content';
import { RULE_NAME as accessibilityLabelForRuleName } from './rules/accessibility-label-for';
import { RULE_NAME as accessibilityTableScopeRuleName } from './rules/accessibility-table-scope';
import { RULE_NAME as accessibilityValidAriaRuleName } from './rules/accessibility-valid-aria';
import { RULE_NAME as bananaInBoxRuleName } from './rules/banana-in-box';
import { RULE_NAME as clickEventsHaveKeyEventsRuleName } from './rules/click-events-have-key-events';
import { RULE_NAME as conditionalСomplexityRuleName } from './rules/conditional-complexity';
import { RULE_NAME as cyclomaticComplexityRuleName } from './rules/cyclomatic-complexity';
import { RULE_NAME as i18nRuleName } from './rules/i18n';
import { RULE_NAME as mouseEventsHaveKeyEventsRuleName } from './rules/mouse-events-have-key-events-rule';
import { RULE_NAME as noAnyRuleName } from './rules/no-any';
import { RULE_NAME as noAutofocusRuleName } from './rules/no-autofocus';
import { RULE_NAME as noCallExpressionRuleName } from './rules/no-call-expression';
import { RULE_NAME as noDistractingElementsRuleName } from './rules/no-distracting-elements';
import { RULE_NAME as noDuplicateAttributesRuleName } from './rules/no-duplicate-attributes';
import { RULE_NAME as noNegatedAsyncRuleName } from './rules/no-negated-async';
import { RULE_NAME as noPositiveTabindexRuleName } from './rules/no-positive-tabindex';
import { RULE_NAME as useTrackByFunctionRuleName } from './rules/use-track-by-function';
declare const _default: {
    configs: {
        all: {
            extends: string;
            rules: {
                "@angular-eslint/template/accessibility-alt-text": string;
                "@angular-eslint/template/accessibility-elements-content": string;
                "@angular-eslint/template/accessibility-label-for": string;
                "@angular-eslint/template/accessibility-table-scope": string;
                "@angular-eslint/template/accessibility-valid-aria": string;
                "@angular-eslint/template/banana-in-box": string;
                "@angular-eslint/template/click-events-have-key-events": string;
                "@angular-eslint/template/conditional-complexity": string;
                "@angular-eslint/template/cyclomatic-complexity": string;
                "@angular-eslint/template/i18n": string;
                "@angular-eslint/template/mouse-events-have-key-events": string;
                "@angular-eslint/template/no-any": string;
                "@angular-eslint/template/no-autofocus": string;
                "@angular-eslint/template/no-call-expression": string;
                "@angular-eslint/template/no-distracting-elements": string;
                "@angular-eslint/template/no-duplicate-attributes": string;
                "@angular-eslint/template/no-negated-async": string;
                "@angular-eslint/template/no-positive-tabindex": string;
                "@angular-eslint/template/use-track-by-function": string;
            };
        };
        base: {
            parser: string;
            plugins: string[];
        };
        recommended: {
            extends: string;
            rules: {
                "@angular-eslint/template/banana-in-box": string;
                "@angular-eslint/template/no-negated-async": string;
            };
        };
        'process-inline-templates': {
            parser: string;
            parserOptions: {
                ecmaVersion: number;
                sourceType: string;
            };
            plugins: string[];
            processor: string;
        };
    };
    processors: {
        'extract-inline-html': {
            preprocess: typeof import("./processors").preprocessComponentFile;
            postprocess: typeof import("./processors").postprocessComponentFile;
            supportsAutofix: boolean;
        };
    };
    rules: {
        "accessibility-alt-text": import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleModule<"accessibilityAltText", [], import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleListener>;
        "accessibility-elements-content": import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleModule<"accessibilityElementsContent", [], import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleListener>;
        "accessibility-label-for": import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleModule<"accessibilityLabelFor", [{
            readonly controlComponents?: readonly string[] | undefined;
            readonly labelAttributes?: readonly string[] | undefined;
            readonly labelComponents?: readonly string[] | undefined;
        }], import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleListener>;
        "accessibility-table-scope": import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleModule<"accessibilityTableScope", [], import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleListener>;
        "accessibility-valid-aria": import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleModule<import("./rules/accessibility-valid-aria").MessageIds, [], import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleListener>;
        "banana-in-box": import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleModule<"bananaInBox", [], import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleListener>;
        "conditional-complexity": import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleModule<"conditionalСomplexity", [{
            maxComplexity: number;
        }], import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleListener>;
        "click-events-have-key-events": import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleModule<"clickEventsHaveKeyEvents", [], import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleListener>;
        "cyclomatic-complexity": import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleModule<"cyclomaticComplexity", [{
            maxComplexity: number;
        }], import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleListener>;
        i18n: import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleModule<import("./rules/i18n").MessageIds, [{
            checkId?: boolean | undefined;
            checkText?: boolean | undefined;
            checkAttributes?: boolean | undefined;
            ignoreAttributes?: string[] | undefined;
            ignoreTags?: string[] | undefined;
            boundTextAllowedPattern?: string | undefined;
        }], import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleListener>;
        "mouse-events-have-key-events": import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleModule<import("./rules/mouse-events-have-key-events-rule").MessageIds, [], import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleListener>;
        "no-any": import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleModule<"noAny", [], import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleListener>;
        "no-autofocus": import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleModule<"noAutofocus", [], import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleListener>;
        "no-call-expression": import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleModule<"noCallExpression", [], import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleListener>;
        "no-distracting-elements": import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleModule<"noDistractingElements", [], import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleListener>;
        "no-duplicate-attributes": import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleModule<"noDuplicateAttributes", [{
            allowTwoWayDataBinding?: boolean | undefined;
        }], import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleListener>;
        "no-negated-async": import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleModule<import("./rules/no-negated-async").MessageIds, [], import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleListener>;
        "no-positive-tabindex": import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleModule<"noPositiveTabindex", [], import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleListener>;
        "use-track-by-function": import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleModule<"useTrackByFunction", [], import("@typescript-eslint/experimental-utils/dist/ts-eslint/Rule").RuleListener>;
    };
};
export default _default;
